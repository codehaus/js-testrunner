h1. Usage

h2. PhantomJS
Before being able to use the JS Test Runner you will need a headless browser. At present JS Test Runner supports
PhantomJS which is a WebKit browser with a Command Line Interface (CLI). Please visit the PhantomJS website and
install the PhantomJS binary on all of the machines that will be running JS Test Runner. The website:

[http://www.phantomjs.org/]

The next thing you need to do is to tell JS Test Runner what the command line looks like to invoke it. This is
done using a Java property. For example, on Mac OS X (depending on the path to PhantomJS):

||Property||Value||
|org.codehaus.jstestrunner.commandPattern|/Applications/phantomjs.app/Contents/MacOS/phantomjs '%1$s' %2$s|

The first parameter (%1$s) allows JS Test Runner to provide a script that will open a set of urls that relate
to QUnit tests. The set of urls is a comma separated list provided as parameter 2 (%2$s).

When declaring the Java property from the command line on Unix you will need to escape the $ character and
quote the entire string. For example, depending on where you install PhantomJS:

{code}
mvn test \
 -Dorg.codehaus.jstestrunner.commandPattern=\
 "/Applications/phantomjs.app/Contents/MacOS/phantomjs '%1\$s' %2\$s"
{code}

For windows it may look like this (again depending on where you install PhantomJS):

{code}
mvn test ^
 -Dorg.codehaus.jstestrunner.commandPattern=^
 "C:\Program Files\phantomjs-1.2.0-win32-dynamic\phantomjs.exe %1$s %2$s"
{code}

For Eclipse, you simply need to ensure that the property is declared under "Installed JREs" / "Default VM Arguments". You will
not need to escape the $ there. For example:

{code}
-Dorg.codehaus.jstestrunner.commandPattern="/Applications/phantomjs.app/Contents/MacOS/phantomjs '%1$s' %2$s"
{code}

h2. Configuring JS Test Runner
Configuration is performed using annotations below the @RunWith annotation. Here are the available options:

* [\@ContextPath | apidocs/org/codehaus/jstestrunner/junit/JSTestSuiteRunner.ContextPath.html]
* [\@Exclude | apidocs/org/codehaus/jstestrunner/junit/JSTestSuiteRunner.Exclude.html]
* [\@Host | apidocs/org/codehaus/jstestrunner/junit/JSTestSuiteRunner.Host.html]
* [\@Include | apidocs/org/codehaus/jstestrunner/junit/JSTestSuiteRunner.Include.html]
* [\@ResourceBase | apidocs/org/codehaus/jstestrunner/junit/JSTestSuiteRunner.ResourceBase.html]
* [\@ContextPath | apidocs/org/codehaus/jstestrunner/junit/JSTestSuiteRunner.TestRunnerFilePath.html]

h2. Logging

JS Test Runner uses the {{Java Logging API}} for logging.

If you wish to view console output from your tests - which includes QUnit's output when an exception is thrown from within test code - you can configure logging for js-testrunner from within your project. This is not required to run js-testrunner.

To configure log output from js-testrunner, you need to create a Java logging configuration file (typically called logging.properties) and configure a surefire property in the project's POM.

h3. Maven Configuration
To use a logging.properties file in src/test/resources, configure a surefire property {{java.util.logging.config.file}} like so:
{code}
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-surefire-plugin</artifactId>
    <configuration>
        <systemPropertyVariables>
        	<java.util.logging.config.file>${basedir}/src/test/resources/logging.properties</java.util.logging.config.file>
        </systemPropertyVariables>
    </configuration>
</plugin>
{code}

h3. Logging Configuration
Following is an example logging.properties file which will log all output from js-testrunner to the console. Information on configuring more advanced logging including logging to files can be found at [http://download.oracle.com/javase/6/docs/technotes/guides/logging/].

{code}
# Logging
handlers = java.util.logging.ConsoleHandler

# Console Logging
java.util.logging.ConsoleHandler.level = ALL
org.codehaus.jstestrunner.level = FINE
{code}

Note that js-testrunner will log all the test output at {{FINE}} level.

h3. Using logging

An exception from within your test code will cause QUnit to print out the exception and the full test source for the test which threw the exception.

You can also log directly from your test code using {{console.log()}} calls.
